#+TITLE: Emacs personal configuration File
#+AUTHOR: Antonio Aslan Suarez

* Packages Manager and packages
  Here we will set all the packages that will be used in this configuration file. 
** Package manager configuration
  This part of the configuration file will configure the package manager which is the [[https://github.com/raxod502/straight.el][straight.el]] package manager.
   #+begin_src emacs-lisp
     (defvar bootstrap-version)
     (let ((bootstrap-file
	    (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	   (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
	 (with-current-buffer
	     (url-retrieve-synchronously
	      "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	      'silent 'inhibit-cookies)
	   (goto-char (point-max))
	   (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
   #+end_src
** GUI
   The first thing to configure as always shall be the Graphical Interface. For this purpose, the following packages will be used:
   - [[https://github.com/emacs-dashboard/emacs-dashboard][DashBoard]]: Extensible startup screen. All can be changed.
   - [[https://github.com/justbur/emacs-which-key][which-key]]: Every command in emacs is followed by a display showing the possible combination of commands.
   - [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]: Helpful for working and installing icons.
   - [[https://github.com/purcell/page-break-lines][page-break-lines]]: Helps to render all page break as horizontal lines.
   - [[https://github.com/dbordak/telephone-line][telephone-line]]: Configures the line at the bottom of the text editor.
   - [[https://github.com/gonewest818/dimmer.el][Dimmer]]: Dims the emacs window that is not currently selected.
   - [[https://github.com/hlissner/emacs-doom-themes][doom-themes]].
   #+begin_src emacs-lisp
     (straight-use-package 'dashboard)
     (straight-use-package 'which-key)
     (straight-use-package 'all-the-icons)
     (straight-use-package 'page-break-lines)
     (straight-use-package 'telephone-line)
     (straight-use-package 'doom-themes)
     (straight-use-package 'dimmer)
   #+end_src
** Evil Mode
   Vim in emacs!
   - [[https://github.com/emacs-evil/evil][Evil]]: Basic vim emulation.
   - [[https://github.com/hlissner/evil-snipe][evil-snipe]]: vim-sneek.
   - [[https://github.com/cofi/evil-leader][evil-leader]]: Provides the Leader key functionality.
   - [[https://github.com/emacs-evil/evil-surround][evil-surround]]: Vim surround plugin.  
   - [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]].  
   - [[https://github.com/Somelauw/evil-org-mode][evil-org.]] 
   #+begin_src emacs-lisp
     (straight-use-package 'evil)
     (straight-use-package 'evil-snipe)
     (straight-use-package 'evil-leader)
     (straight-use-package 'evil-surround)
     (straight-use-package 'evil-nerd-commenter)
     (straight-use-package 'evil-org)
   #+end_src
** Functionality
   - [[https://github.com/emacs-helm/helm][Helm]]: Framework for incremental completions and narrowing selections.
   - [[https://magit.vc/][magit]]: Git inside emacs.
   - [[https://github.com/bbatsov/projectile][Projectile]]: Project integration in emacs.   
   - [[https://github.com/noctuid/general.el#about][general]]: More convenient keybindings. 
   - [[https://github.com/abo-abo/avy][avy]]: More info in the future. 
      
   #+begin_src emacs-lisp
     (straight-use-package 'helm)
     (straight-use-package 'helm-projectile)
     (straight-use-package 'magit)
     (straight-use-package 'projectile)
     (straight-use-package 'general)
     (straight-use-package 'avy)
   #+end_src
** Programming
   Used to program and snippets.
   #+begin_src emacs-lisp
     (straight-use-package 'lsp-mode)
     (straight-use-package 'company)
     (straight-use-package 'yasnippet)
     (straight-use-package 'yasnippet-snippets)
     (straight-use-package 'cmake-mode)
     (require 'cmake-mode)
   #+end_src
** Documents and LaTeX
   - [[https://github.com/politza/pdf-tools][pdf-tools]]: render PDFs files inside emacs. Useful for working with LaTeX documents.  
   - [[https://www.emacswiki.org/emacs/AUCTeX][auctex]]: Like vimtex.  
   
   #+begin_src emacs-lisp
     (straight-use-package 'pdf-tools)
     (straight-use-package 'auctex)
   #+end_src
** Org-mode
   - [[https://github.com/sabof/org-bullets][org-bullets]]: Show org bullets as UTF-8 Characters. 
   #+begin_src emacs-lisp
     (straight-use-package 'org-bullets)
   #+end_src

   
* GUI Configuration
  For configuring the GUI, it not only required to add a couple of packages, some things should be configured by hand.
** Font and size
   Depending on the OS, a different font will be used. If using linux the Iosevka font shall be installed throught yay package manager.
   #+begin_example emacs-lisp
   (cond
 ((string-equal system-type "windows-nt") ; Microsoft Windows
  (when (member "Consolas" (font-family-list))
    (set-frame-font "Consolas" t t)))
 ((string-equal system-type "darwin") ; macOS
  (when (member "Menlo" (font-family-list))
    (set-frame-font "Menlo" t t)))
 ((string-equal system-type "gnu/linux") ; linux
  (when (member "Iosevka" (font-family-list))
  (set-frame-font "Iosevka" t t))))
   #+end_example
** Scroll bars
   #+begin_src emacs-lisp
     ;; hide scroll bar in new frames
     (defun my/disable-scroll-bars (frame)
       (modify-frame-parameters frame
				'((vertical-scroll-bars . nil)
				  (horizontal-scroll-bars . nil))))
     (add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

     ;; scroll off
     (setq scroll-margin 7)
     (setq scroll-conservatively 999) ;; do not center when scrolling
   #+end_src
** Line numbering
   In this configuration, line numbers will only appear when working on coding projects. For example not in org files.
   #+begin_example emacs-lisp
   (add-hook 'global 'display-line-numbers-mode)	; only show numbers in programming buffers
   (setq display-line-numbers-type 'relative)		; relative line numbers
   #+end_example
** Dashboard
   The welcome screen when emacs is opened can be configured here.
   #+begin_src emacs-lisp
     ;; dashboard
     (require 'dashboard)
     (dashboard-setup-startup-hook)
     (setq dashboard-startup-banner 'logo)
     (setq dashboard-center-content t)
     (setq dashboard-set-heading-icons t)
     (setq dashboard-set-file-icons t)
     (setq dashboard-set-init-info t)
     (setq dashboard-projects-backend 'projectile)
     (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
     (setq dashboard-items '((recents  . 5)
			     (bookmarks . 5)
			     (projects . 5)
			     (agenda . 5)
			     (registers . 5)))
   #+end_src
** Modeline or telephone-line
   The bar at the bottom of the text editor.
   #+begin_src emacs-lisp
     ;; modeline
     ;; for telephone-line configuration needs to be before (telephhone-line-mode 1)
     (require 'telephone-line)
     (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
	   telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
	   telephone-line-primary-right-separator 'telephone-line-cubed-right
	   telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
     (setq telephone-line-height 24)
     (setq telephone-line-lhs
	   '((evil   . (telephone-line-evil-tag-segment))
	     (accent . (telephone-line-vc-segment
			telephone-line-erc-modified-channels-segment
			telephone-line-process-segment))
	     (nil    . (telephone-line-buffer-segment
			telephone-line-minor-mode-segment))))
     (setq telephone-line-rhs
	   '((nil    . (telephone-line-misc-info-segment))
	     (accent . (telephone-line-major-mode-segment))
	     (evil   . (telephone-line-airline-position-segment))))
     (telephone-line-mode 1)
   #+end_src
** Theme and dimmer
   #+begin_src emacs-lisp
     ;; doom themes
     (load-theme 'doom-gruvbox t)

     ;; dimmer
     (require 'dimmer)
     (dimmer-configure-which-key)
     (dimmer-configure-helm)
     (dimmer-configure-magit)
     (dimmer-configure-which-key)
     (dimmer-configure-org)
     (dimmer-mode t)
   #+end_src
** Which-key
   #+begin_src emacs-lisp
     (require 'which-key)
     (which-key-mode 1)
   #+end_src
** Other minor configuration
   #+begin_src emacs-lisp
     ;; hide GUI
     (menu-bar-mode -1)
     (toggle-scroll-bar -1)
     (tool-bar-mode -1)
     ;; disable bell
     (setq ring-bell-function 'ignore)
     ;; Line highlighting
     (global-hl-line-mode 1)

     ;; Show matching parenthesis
     (show-paren-mode 1)

     ;; backup files to another folder
     (setq backup-directory-alist `(("." . "~/.saves")))
   #+end_src
* Evil Mode
  Time to configure the vim mode in emacs.
  #+begin_src emacs-lisp
    ;; evil mode
    (setq evil-want-C-u-scroll t)   ; use C-u to scroll up in normal mode
    (require 'evil)
    (require 'evil-nerd-commenter)
    (require 'evil-org)
    (add-hook 'org-mode-hook 'evil-org-mode)
    (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    (require 'evil-surround)
    (global-evil-leader-mode)
    (global-evil-surround-mode 1)
    (evil-mode 1)
    (evil-snipe-mode 1)
  #+end_src
 
* Functionality and Plugin Configuration
  Here all the rest of the pluggins will be configured.
** Projectile
   #+begin_src emacs-lisp
     (projectile-mode 1)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   #+end_src
** Helm Mode
   #+begin_src emacs-lisp
     ;; helm mode
     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
     (global-set-key (kbd "C-x C-f") #'helm-find-files)
     (global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )
     (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu
     (global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm
     (global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations
     (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
     (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to pastelm-mode 1)
     (require 'helm-projectile)
     (helm-projectile-on)
   #+end_src
** LSP
   #+begin_src emacs-lisp
     (setq gc-cons-threshold 100000000) ; needed because communication generates a lot of garbage
     (setq read-process-output-max (* 1024 1024)) ;; 1mb
     (setq lsp-keymap-prefix "C-c l")
     (require 'lsp-mode)
     (add-hook 'c-mode-hook #'lsp)
     (add-hook 'c++-mode-hook #'lsp)
     (add-hook 'python-mode-hook #'lsp)
   #+end_src
** Company and yasnippet
   #+begin_src emacs-lisp
     ;; Company
     (require 'company)
     (with-eval-after-load 'company
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-n") #'company-select-next)
       (define-key company-active-map (kbd "C-p") #'company-select-previous))
     (add-hook 'after-init-hook 'global-company-mode)
     (define-key global-map (kbd "C-.") 'company-files)

     ;; Yasnippet
     (require 'yasnippet)
     (yas-global-mode 1)
   #+end_src
** LaTeX and PDFs
   #+begin_src emacs-lisp
     ;; pdf tools
     (pdf-tools-install)
     ;; (evil-set-initial-state 'pdf-view-mode 'normal)

     ;; auctex
     (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
	   TeX-source-correlate-start-server t)
     ; revert the PDF-buffer after the TeX compilation has finished
     (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
   #+end_src
** Other configs
   #+begin_src emacs-lisp
     ;; avy
     (avy-setup-default)
   #+end_src

* Org Mode Configuration
  #+begin_src emacs-lisp
    (setq org-directory "~/.org") ; main org directory
    ;; (setq org-agenda-files
    ;;       '("~/.org/tasks.org" "~/.org/birthdays.org"
    ;; 	"~/.org/reminders.org" "~/.org/university.org"))  ; org agenda tasks files

    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  #+end_src

* Keybindings
  #+begin_src emacs-lisp
    (general-define-key
     :states '(normal visual insert emacs)
     :prefix "SPC"
     :non-normal-prefix "M-SPC"
      "'" '(term :which-key "iterm")
      ;; magit
      "m" '(magit :which-key "magit")
      ;; buffers
      "bn" '(evil-next-buffer :which-key "next buffer")
      "bp" '(evil-previous-buffer :which-key "previous buffer")
      "bd" '(evil-delete-buffer :which-key "delete buffer")
      "bb" '(helm-buffers-list :which-key "change buffer")
      ;; windows
      "wj" '(evil-window-down :which-key "window down")
      "wk" '(evil-window-up :which-key "window up")
      "wh" '(evil-window-left :which-key "window left")
      "wl" '(evil-window-right :which-key "window right")
      "ws" '(evil-window-split :which-key "window split")
      "wv" '(evil-window-vsplit :which-key "window vsplit")
      "wd" '(evil-window-delete :which-key "window delete")
      ;; tabs
      "tn" '(tab-new :which-key "tab new")
      "th" '(tab-previous :which-key "tab previous")
      "tl" '(tab-next :which-key "tab next")
      "tc" '(tab-close :which-key "tab close")
      ;; evil-commenter
      "ci" '(evilnc-comment-or-uncomment-lines :which-key "(un)comment line")
      "cl" '(evilnc-quick-comment-or-uncomment-to-the-line :which-key "(un)comment to the line")
      "cc" '(evilnc-copy-and-comment-lines :which-key "copy & comment")
      "cp" '(evilnc-comment-or-uncomment-paragraphs :which-key "(un)comment parahraphs")
      "cr" '(comment-or-uncomment-region :which-key "(un)comment region")
      "cv" '(evilnc-toggle-invert-comment-line-by-line :which-key "invert comment by line")
      "\\" '(evilnc-comment-operator :which-key "comment operator")
      ;; avy
      ";"  '(avy-goto-char-timer :which-key "avy char timer")
      ;; term
      "tt" '(term :which-key "shell")
      ;; ...
    )
  #+end_src
